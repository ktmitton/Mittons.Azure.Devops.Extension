    internal class {{ClassName}} : {{InterfaceName}}
    {
        private readonly HttpClient _httpClient;

        public {{ClassName}}(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        {{#Methods}}

        public async {{{ReturnType}}} {{MethodName}}({{{ParametersList}}})
        {
            var allQueryParameters = new Dictionary<string, object?>{
                {{{QueryParameters}}}
            };

            var filteredQueryParameters = allQueryParameters
                .Where(x => !(x.Value is null))
                .Select(x => new KeyValuePair<string, string>(x.Key, (typeof(bool) == x.Value?.GetType() ? x.Value?.ToString()?.ToLower() : x.Value?.ToString()) ?? string.Empty))
                .OrderBy(x => x.Key)
                .ToArray();

            var query = filteredQueryParameters.Any() ? $"?{string.Join("&", filteredQueryParameters.Select(x => $"{x.Key}={x.Value}"))}" : string.Empty;

            var acceptHeader = new MediaTypeWithQualityHeaderValue("{{RequestAcceptType}}");
            acceptHeader.Parameters.Add(new NameValueHeaderValue("api-version", "{{RequestApiVersion}}"));
            acceptHeader.Parameters.Add(new NameValueHeaderValue("excludeUrls", "true"));
            acceptHeader.Parameters.Add(new NameValueHeaderValue("enumsAsNumbers", "true"));
            acceptHeader.Parameters.Add(new NameValueHeaderValue("msDateFormat", "true"));
            acceptHeader.Parameters.Add(new NameValueHeaderValue("noArrayWrap", "true"));

            var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"{{RouteTemplate}}{query}");
            requestMessage.Headers.Accept.Add(acceptHeader);

            var httpResponseMessage = await _httpClient.SendAsync(requestMessage);

            await httpResponseMessage.Content.ReadAsStringAsync();

            return string.Empty;
        }
        {{/Methods}}
    }
