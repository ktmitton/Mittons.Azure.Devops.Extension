    internal class {{ClassName}} : {{InterfaceName}}
    {
        private readonly HttpClient _httpClient;

        public {{ClassName}}(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private MediaTypeWithQualityHeaderValue CreateAcceptHeader(string mediaType, string apiVersion)
        {
            var acceptHeader = new MediaTypeWithQualityHeaderValue(mediaType);
            acceptHeader.Parameters.Add(new NameValueHeaderValue("api-version", apiVersion));
            acceptHeader.Parameters.Add(new NameValueHeaderValue("excludeUrls", "true"));
            acceptHeader.Parameters.Add(new NameValueHeaderValue("enumsAsNumbers", "true"));
            acceptHeader.Parameters.Add(new NameValueHeaderValue("msDateFormat", "true"));
            acceptHeader.Parameters.Add(new NameValueHeaderValue("noArrayWrap", "true"));

            return acceptHeader;
        }

        public string CreateQuery(Dictionary<string, object?> queryParameters)
        {
            var filteredQueryParameters = queryParameters
                .Where(x => !(x.Value is null))
                .Select(x => new KeyValuePair<string, string>(x.Key, (typeof(bool) == x.Value?.GetType() ? x.Value?.ToString()?.ToLower() : x.Value?.ToString()) ?? string.Empty))
                .OrderBy(x => x.Key)
                .ToArray();

            return filteredQueryParameters.Any() ? $"?{string.Join("&", filteredQueryParameters.Select(x => $"{x.Key}={x.Value}"))}" : string.Empty;
        }
        {{> ByteArrayMethod}}
        {{> JsonMethod}}
        {{> StringMethod}}
        {{> XmlDocumentMethod}}
        {{> ZipArchiveMethod}}
    }
