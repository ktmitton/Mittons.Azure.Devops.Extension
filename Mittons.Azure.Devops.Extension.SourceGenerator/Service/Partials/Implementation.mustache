    internal class {{ClassName}} : {{InterfaceName}}
    {
        private readonly IChannel _channel;

        private readonly Lazy<Task> _initializationTask;

        private {{ClassName}}RemoteProxyFunctionDefinitionCollection? _remoteProxyFunctionDefinitionCollection;

        public {{ClassName}}(IChannel channel)
        {
            _channel = channel;
            _initializationTask = new Lazy<Task>(() => InitializeAsync(default));
        }

        private async Task InitializeAsync(CancellationToken cancellationToken)
        {
            _remoteProxyFunctionDefinitionCollection = await _channel.GetServiceDefinitionAsync<{{ClassName}}RemoteProxyFunctionDefinitionCollection>("{{ContributionId}}", cancellationToken);
        }

        public async Task SimpleFunctionAsync(CancellationToken cancellationToken)
        {
            await _initializationTask.Value;

            await _channel.InvokeRemoteProxyMethodVoidAsync(_remoteProxyFunctionDefinitionCollection.SimpleFunction.FunctionId, cancellationToken);
        }

        public async Task SimpleFunctionRenamedAsync(CancellationToken cancellationToken)
        {
            await _initializationTask.Value;

            await _channel.InvokeRemoteProxyMethodVoidAsync(_remoteProxyFunctionDefinitionCollection.RenamedFunction.FunctionId, cancellationToken);
        }
    }
