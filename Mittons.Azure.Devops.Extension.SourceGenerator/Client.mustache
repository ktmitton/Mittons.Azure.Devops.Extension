using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using Microsoft.Extensions.DependencyInjection;
using Mittons.Azure.Devops.Extension.Sdk;
using Mittons.Azure.Devops.Extension.Service;

#nullable enable

namespace {{namespace}}
{
    internal static class {{className}}Extensions");
    {
        public static IServiceCollection Add{{className}}(this IServiceCollection @serviceCollection)
        {
            @serviceCollection.AddHttpClient<IGitClient, GitClient>((serviceProvider, client) => {
                var resourceAreaId = "{{resourceAreaId}}";
                var sdk = serviceProvider.GetRequiredService<ISdk>();

                if (!sdk.ResourceAreaUris.TryGetValue(resourceAreaId, out var baseAddress))
                {
                    throw new ArgumentException($"Invalid resource id [{resourceAreaId}]");
                }

                client.BaseAddress = baseAddress;

                client.DefaultRequestHeaders.Authorization = sdk.AuthenticationHeader;
                client.DefaultRequestHeaders.Add("X-VSS-ReauthenticationAction", "Suppress");
                client.DefaultRequestHeaders.Add("X-TFS-FedAuthRedirect", "Suppress");
            });

            return @serviceCollection;
        }
    }

    internal class {{className}} : RestClient, I{{className}}
    {
        public {{className}}(HttpClient httpClient) : base(httpClient)
        {
        }

        {{#methods}}
        public Task<{{returnType}}> {methodName} ({{#joinAsSingleLineList}}{{#parameters}}{{type}} {{name}},{{/parameters}}{{/joinAsSingleLineList}})
        {
            var queryParameters = new Dictionary<string, object?>{
                {{#joinAsMultiLineList}}
                    {{#parameters}}
                        {{#isQueryParameter}}
                            { "{{name}}", {{name}} },
                        {{/isQueryParameter}}
                    {{/parameters}}
                {{/joinAsMultiLineList}}
            };

            return base.SendRequestAsync<{{returnTypes}}>(
                {{#parameters}}
                    {{#isBodyParameter}}
                body: JsonContent.Create({{name}}),
                    {{/isBodyParameter}}
                {{/parameters}}
                queryParameters: queryParameters,
                acceptType: "{{acceptType}}",
                apiVersion: "{{apiVersion}}",
                method: new HttpMethod("{{httpMethod}}"),
                route: "{{routeTemplate}}"
            );
        }
        {{/methods}}
    }
}